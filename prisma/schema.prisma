
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountTypes {
    Assets
    Liability
    Equity
    Revenue
    Expense
}

enum Gender {
    Male
    Female
}


enum AccountStatus {
  Active
  Inactive
}


enum SavingsType {
  sharedCap
  memberSavings
}

enum SavingsTransactionType {
  withdrawal
  deposit
}

enum ItemType {
  product
  services
}

enum InvoiceStatus {
  pending
  paid
  cancelled
}

enum JournalType {
  cashReceipts
  cashDisbursement
  generalJournal
}

// Transactional entries that trigger journal postings
enum ReferenceType {
  MemberRegistration
  SalesPayments
  LoanDisbursements
  LoanRepayments
  SavingsDeposit
  SavingsWithdrawal
  ShareDeposit 
  ShareWithdrawal
  ManualJournals
}

enum FundType {
  Savings
  ShareCapital
}

enum FundTransactionsType {
  SavingsDeposit
  SavingsWithdrawal
  ShareCapDeposit
  ShareCapWithdrawal
}

enum LoanType {
  Weekly
  Monthly
  Yearly
  Diminishing
  EndOfTerm
}

enum Roles {
   Admin
   Regular
}

model Users {
  userId          String        @id @default(cuid())
  userName        String
  password        String
  role            Roles
}

model Members {
  memberId         String        @id @default(cuid())
  accountStatus    AccountStatus @default(Active)
  lastName         String              
  firstName        String
  gender           Gender
  idNumber         Int?
  tin              String?
  dateAccepted     DateTime?
  arb              String?
  bodResNo         String?
  membershipType   String?
  civilStatus      String?
  highestEdAttain  String?
  numOfDependents  Int?
  religion         String?
  annualIncom      Int?
  birthDate        DateTime?
  address          String
  occupation       String?
  contactNo        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())

  Funds            MemberFunds?

  dividends        Dividends[]   
  loans            MemberLoans[] 
  invoice          Invoice[]
  Journals         JournalEntries[]


  @@map("members")
  @@index([lastName, firstName])

}

model MemberLoans {
  loanId          BigInt      @id @default(autoincrement())
  memberId        String      
  loanType        LoanType    
  amountLoaned    Float       @default(0)
  interestRate    Float
  termInMonths    Int
  issueDate       DateTime
  dueDate         DateTime
  isExisting      Boolean     @default(false)
  ledgerId        BigInt?     @unique
  JournalEntries  JournalEntries? @relation(fields: [ledgerId], references: [entryId])

  Repayments      LoanRepayments[]
  Member          Members     @relation(references: [memberId], fields: [memberId])
}

model LoanRepayments {
  repaymentId     BigInt       @id @default(autoincrement())
  loanId          BigInt
  paymentSched    DateTime
  paymentDate     DateTime?
  isExisting      Boolean     @default(false)
  principal       Float       @default(0)
  interest        Float       @default(0)
  amountDue       Float
  remarks         String?

  journalRef      BigInt?

  Loan            MemberLoans   @relation(references: [loanId], fields: [loanId], onDelete: Cascade)
}

model MemberFunds {
  fundId            Int         @id @default(autoincrement())
  memberId          String      @unique   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())       
  savingsBal        Float       @default(0)
  shareCapBal       Float       @default(0)
  Member            Members     @relation(fields: [memberId], references: [memberId])

  Transactions      FundTransactions[]

  @@map("member_funds")
}

model FundTransactions {
  fundTransactId    Int             @id @default(autoincrement())
  fundId            Int             
  ledgerId          BigInt?
  fundType          FundType
  transactionType   FundTransactionsType
  createdAt         DateTime        @default(now())
  postedBalance     Float  
  newBalance        Float
  JournalEntries    JournalEntries? @relation(fields: [ledgerId], references: [entryId])
  MemberFunds       MemberFunds     @relation(fields: [fundId], references: [fundId])

  @@map("fund_transactions")
  @@index([fundId])
}

model Invoice {
   invoiceId      BigInt           @id @default(autoincrement())
   memberId       String
   dateOfInvoice  DateTime         @default(now())
   baseGrandTotal Float         
   outStandingAmt Float   
   journalId      BigInt?
   Members        Members          @relation(fields: [memberId], references: [memberId])

   InvoiceItems   InvoiceItems[]  
   InvoicePayments InvoicePayments[]


  @@map("invoices")
  @@index([dateOfInvoice, memberId, outStandingAmt])
}

model InvoiceItems {
  invoiceItemId   BigInt      @id @default(autoincrement())
  invoiceId       BigInt
  itemID          String
  rate            Int
  trade           Int?
  quantity        Int
  Item            Items      @relation(fields: [itemID] , references: [itemID])           
  Invoice         Invoice    @relation(fields: [invoiceId], references: [invoiceId], onDelete: Cascade)



  @@map("invoice_items")
}

model InvoicePayments {
  paymentId       BigInt             @id  @default(autoincrement())
  invoiceId       BigInt
  orNo            String
  paymentReceived Float 
  journalRef      BigInt
  paymentDate     DateTime          @default(now())

  JournalEntry    JournalEntries    @relation(references: [entryId], fields: [journalRef])
  Invoice         Invoice           @relation(references: [invoiceId], fields: [invoiceId])

  @@map("invoice_payments")
  @@index([invoiceId])
}

model Items {
  itemID          String       @id @default(cuid())
  itemName        String
  itemDescription String?
  itemType        ItemType
  sellingPrice    Int
  costPrice       Int?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  stocks          Int?         @default(0)

  InvoiceItems    InvoiceItems[]


}

// second level of account tree
model AccountsSecondLvl {
  rootId          Int           @id @default(autoincrement())
  rootType        AccountTypes
  rootName        String
  createdAt       DateTime      @default(now())
  Children        AccountsThirdLvl[]

  @@map("accounts_second")
}

model AccountsThirdLvl {
  accountId      String               @id @default(cuid())
  accountName    String
  rootId         Int
  openingBalance Float
  runningBalance Float                @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now())
  isActive       Boolean              @default(true)


  RootID         AccountsSecondLvl    @relation(references: [rootId], fields: [rootId])

  Dividends      Dividends[]
  JournalItems   JournalItems[]

}


model Dividends {
  dividendId            BigInt                 @id  @default(autoincrement())
  memberId              String
  accountId             String
  datePosted            DateTime               @default(now())
  amount                Float
  members               Members                @relation(fields: [memberId], references: [memberId])
  account               AccountsThirdLvl       @relation(fields: [accountId], references: [accountId])


  @@map("dividends")
  @@index([memberId, accountId, datePosted])
}

model SavingsTransact {
  transactionId       BigInt          @id @default(autoincrement())
  savingsId           String
  transactionType     SavingsTransactionType
}

model JournalEntries {
  entryId             BigInt         @id @default(autoincrement())
  entryDate           DateTime   
  referenceName       String       
  referenceType       ReferenceType
  notes               String?
  createdAt           DateTime       @default(now())
  memberId            String?
  journalType         JournalType
  JournalItems        JournalItems[]
  MemberFundsTransact FundTransactions[]

  //* To be the particulars
  Members             Members?        @relation(fields: [memberId], references: [memberId])
  InvoicePayments     InvoicePayments[]

  MemberLoans         MemberLoans?


  @@map("journal_entries")
  @@index([entryDate, memberId])
}

model JournalItems {
  journalItemsId     BigInt             @id @default(autoincrement())
  entryId            BigInt
  accountId          String
  debit              Float
  credit             Float
  
  JournalEntries     JournalEntries     @relation(references: [entryId], fields: [entryId], onDelete: Cascade)
  Accounts           AccountsThirdLvl   @relation(references: [accountId], fields: [accountId])

  @@map("journal_items")
  @@index([accountId, entryId])
}
