
generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountTypes {
    Assets
    Contra_Assets
    Liability
    Equity
    Revenue
    Expense
}

enum AccountStatus {
  Active
  Inactive
}

enum ItemType {
  product
  services
}


enum JournalType {
  cashReceipts
  cashDisbursement
  generalJournal
}

// Transactional entries that trigger journal postings
enum ReferenceType {
  MemberRegistration
  SalesPayments
  LoanDisbursements
  LoanRepayments
  SavingsDeposit
  SavingsWithdrawal
  ShareDeposit 
  ShareWithdrawal
  ManualJournals
}

enum FundType {
  Savings
  ShareCapital
}

enum FundTransactionsType {
  SavingsDeposit
  SavingsWithdrawal
  ShareCapDeposit
  ShareCapWithdrawal
}

enum LoanStatus {
  Active
  Closed
}

enum RepaymentStyle {
  StraightPayment
  Diminishing
  OneTime
}

enum RepaymentInterval {
  Weekly
  Monthly
  Yearly
}

enum Roles {
   Admin
   Regular
}

model Users {
  userId          String        @id @default(cuid())
  userName        String
  password        String
  role            Roles
}

model Members {
  memberId         String        @id @default(cuid())
  accountStatus    AccountStatus @default(Active)
  lastName         String              
  firstName        String
  middleName       String?
  gender           String?
  idNumber         Int?
  tin              String?
  dateAccepted     DateTime?
  arb              String?
  bodResNo         String?
  membershipType   String?
  civilStatus      String?
  highestEdAttain  String?
  numOfDependents  Int?
  religion         String?
  annualIncom      Int?
  birthDate        DateTime?
  address          String?
  occupation       String?
  contactNo        String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())

  Funds            MemberFunds?

  dividends        Dividends[]   
  loans            MemberLoans[] 
  invoice          Invoice[]
  Journals         JournalEntries[]


  @@map("members")
  @@index([lastName, firstName])

}

model LoanSource {
  sourceId        Int         @id @default(autoincrement())
  sourceName      String
  defaultAccount  String

  Loans           MemberLoans[]
  DefaultAccount  AccountsThirdLvl  @relation(references: [accountId], fields: [defaultAccount])
}

model MemberLoans {
  loanId          BigInt      @id @default(autoincrement())
  memberId        String      
  loanStatus      LoanStatus  @default(Active) 
  repStyle        RepaymentStyle
  repInterval     RepaymentInterval
  sourceId        Int 
  amountLoaned    Decimal     @db.Decimal(10, 2)     
  amountPayable   Decimal     @db.Decimal(10, 2)    
  interestRate    Decimal     @db.Decimal(10, 2)
  paymentQty      Int
  issueDate       DateTime
  dueDate         DateTime
  isExisting      Boolean     @default(false)
  journalRef      BigInt?     @unique
  parentLoan      BigInt?     @unique
  // children        MemberLoans[]   @relation("SelfReference")
  // Parent          MemberLoans?    @relation("SelfReference", fields: [parentLoan], references: [loanId])     

  JournalEntries  JournalEntries? @relation(fields: [journalRef], references: [entryId])
  Repayments      LoanRepayments[]
  Member          Members     @relation(references: [memberId], fields: [memberId])
  Source          LoanSource  @relation(references: [sourceId], fields: [sourceId])


  @@index([memberId, loanStatus])
}

model LoanRepayments {
  repaymentId     BigInt        @id @default(autoincrement())
  loanId          BigInt
  paymentSched    DateTime
  paymentDate     DateTime?
  isExisting      Boolean       @default(false)
  principal       Decimal       @default(0) @db.Decimal(10, 2)
  interest        Decimal       @default(0) @db.Decimal(10, 2)
  remarks         String?

  journalRef      BigInt?     
  JournalEntries  JournalEntries? @relation(fields: [journalRef], references: [entryId])

  Loan            MemberLoans   @relation(references: [loanId], fields: [loanId], onDelete: Cascade)

  @@index([loanId, paymentDate])
}

model MemberFunds {
  fundId            Int         @id @default(autoincrement())
  memberId          String      @unique   
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())       
  savingsBal        Float       @default(0)
  shareCapBal       Float       @default(0)
  Member            Members     @relation(fields: [memberId], references: [memberId])

  Transactions      FundTransactions[]

  @@map("member_funds")
}

model FundTransactions {
  fundTransactId    Int             @id @default(autoincrement())
  fundId            Int             
  ledgerId          BigInt
  fundType          FundType
  transactionType   FundTransactionsType
  createdAt         DateTime        @default(now())
  postedBalance     Decimal         @db.Decimal(10,2)  
  newBalance        Decimal         @db.Decimal(10,2)
  JournalEntries    JournalEntries? @relation(fields: [ledgerId], references: [entryId])
  MemberFunds       MemberFunds     @relation(fields: [fundId], references: [fundId])

  @@map("fund_transactions")
  @@index([fundId])
}

model Invoice {
   invoiceId      BigInt           @id @default(autoincrement())
   memberId       String
   dateOfInvoice  DateTime         @default(now())
   Members        Members          @relation(fields: [memberId], references: [memberId])

   InvoiceItems   InvoiceItems[]  

  @@map("invoices")
  @@index([dateOfInvoice, memberId ])
}

model InvoiceItems {
  invoiceItemId   BigInt      @id @default(autoincrement())
  invoiceId       BigInt
  itemID          String
  principalPrice  Int
  trade           Int        @default(0)
  quantity        Int
  isTotallyPaid   Boolean    @default(false)
  Item            Items      @relation(fields: [itemID] , references: [itemID])           
  Invoice         Invoice    @relation(fields: [invoiceId], references: [invoiceId], onDelete: Cascade)
  ItemPayment     InvoiceItemsPayments[]
  

  @@index([isTotallyPaid, invoiceId])
  @@map("invoice_items")
}


model InvoiceItemsPayments {
  itemsPaymentId  BigInt            @id @default(autoincrement())
  invoiceItemId   BigInt  
  principalPaid   Decimal           @db.Decimal(10,2)
  journalRef      BigInt
  interestPaid    Decimal           @db.Decimal(10,2)
  tradingPaid     Decimal           @db.Decimal(10,2)
  InvoiceItem     InvoiceItems      @relation(fields: [invoiceItemId], references: [invoiceItemId])
  JournalEntry    JournalEntries    @relation(fields: [journalRef], references: [entryId])

}


model ItemSource {
  sourceId       Int          @id @default(autoincrement())
  sourceName     String
  defaultAccount String

  Items          Items[]
  Accounts       AccountsThirdLvl @relation(references: [accountId], fields: [defaultAccount])

  
}

model Items {
  itemID          String       @id @default(cuid())
  itemName        String
  itemDescription String?
  itemType        ItemType
  sellingPrice    Int
  trade           Int         @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  stocks          Int?         @default(0)
  sourceId        Int

  InvoiceItems    InvoiceItems[]
  ItemSource      ItemSource  @relation(fields: [sourceId], references: [sourceId])


}

// second level of account tree
model AccountsSecondLvl {
  rootId          Int           @id @default(autoincrement())
  rootType        AccountTypes
  rootName        String
  createdAt       DateTime      @default(now())
  Children        AccountsThirdLvl[]

  @@map("accounts_second")
}

model AccountsThirdLvl {
  accountId      String               @id @default(cuid())
  accountName    String
  rootId         Int
  openingBalance Decimal              @db.Decimal(10 , 2) 
  runningBalance Decimal              @default(0) @db.Decimal(10 , 2) 
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now())
  isActive       Boolean              @default(true)


  RootID         AccountsSecondLvl    @relation(references: [rootId], fields: [rootId])

  Dividends      Dividends[]
  JournalItems   JournalItems[]
  LoanSource     LoanSource[]
  ItemSource     ItemSource[]

}


model Dividends {
  dividendId            BigInt                 @id  @default(autoincrement())
  memberId              String
  accountId             String
  datePosted            DateTime               @default(now())
  amount                Float
  members               Members                @relation(fields: [memberId], references: [memberId])
  account               AccountsThirdLvl       @relation(fields: [accountId], references: [accountId])


  @@map("dividends")
  @@index([memberId, accountId, datePosted])
}

model JournalEntries {
  entryId             BigInt         @id @default(autoincrement())
  entryDate           DateTime   
  referenceName       String       
  referenceType       ReferenceType
  notes               String?
  memberId            String?
  journalType         JournalType
  JournalItems        JournalItems[]
  MemberFundsTransact FundTransactions[]

  //* To be the particulars
  Members             Members?        @relation(fields: [memberId], references: [memberId])
  InvoiceItemPayments InvoiceItemsPayments[]

  MemberLoans         MemberLoans?
  LoanRepayments      LoanRepayments[]


  @@map("journal_entries")
  @@index([entryDate, memberId,referenceName, journalType])
}

model JournalItems {
  journalItemsId     BigInt             @id @default(autoincrement())
  entryId            BigInt
  accountId          String
  debit              Decimal            @db.Decimal(10, 2)
  credit             Decimal            @db.Decimal(10, 2)
  
  JournalEntries     JournalEntries     @relation(references: [entryId], fields: [entryId], onDelete: Cascade)
  Accounts           AccountsThirdLvl   @relation(references: [accountId], fields: [accountId])

  @@map("journal_items")
  @@index([accountId, entryId])
}
