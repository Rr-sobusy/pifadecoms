
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountTypes {
    Assets
    Liability
    Equity
    Revenue
    Expense
}

enum Gender {
    Male
    Female
}


enum AccountStatus {
  active
  inactive
}


enum SavingsType {
  sharedCap
  memberSavings
}

enum SavingsTransactionType {
  withdrawal
  deposit
}

enum ItemType {
  product
  services
}

enum InvoiceStatus {
  pending
  paid
  cancelled
}

model Members {
  memberId         String        @id @default(cuid())
  lastName         String              
  firstName        String
  gender           Gender
  idNumber         Int?
  tin              String?
  dateAccepted     DateTime?
  arb              String?
  bodResNo         String?
  membershipType   String?
  civilStatus      String?
  highestEdAttain  String?
  numOfDependents  Int?
  religion         String?
  annualIncom      Int?
  birthDate        DateTime?
  address          String
  occupation       String?
  contactNo        String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @default(now())

  dividends        Dividends[]    
  members          Invoice[]

  @@map("members")
  @@index([lastName])

}

model Invoice {
   invoiceId      BigInt           @id @default(autoincrement())
   memberId       String
   dateOfInvoice  DateTime         @default(now())
   baseGrandTotal Float         
   outStandingAmt Float   
   invStatus      InvoiceStatus    @default(pending)
   Members        Members          @relation(fields: [memberId], references: [memberId])
   InvoiceItems   InvoiceItems[]      


  @@map("invoices")
  @@index([dateOfInvoice, memberId, invStatus])
}

model InvoiceItems {
  invoiceItemID   BigInt      @id @default(autoincrement())
  invoiceID       BigInt
  itemID          String
  rate            Int
  quantity        Int



  Item            Items      @relation(fields: [itemID] , references: [itemID])           
  Invoice         Invoice    @relation(fields: [invoiceID], references: [invoiceId], onDelete: Cascade)



  @@map("invoice_items")
}

model Items {
  itemID          String       @id @default(cuid())
  itemName        String
  itemDescription String?
  itemType        ItemType
  sellingPrice    Int
  costPrice       Int?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now())
  stocks          Int?         @default(0)

  InvoiceItems    InvoiceItems[]





  // cost of goods sold
  expenseAcct     String?

  // inventory account
  inventoryAcct   String?

  // accounts receivable account
  receivableAcct  String?

  // product receivable income (cost of goods counter part)
  incomeAcct      String?

  // trading income account
  tradingAcct     String?

  // interest income account
  interestAcct    String?

  IncomeAcct      AccountsThirdLvl?   @relation("IncomeItems", fields: [incomeAcct], references: [accountId])


}

// second level of account tree
model AccountsSecondLvl {
  rootId          Int           @id @default(autoincrement())
  rootType        AccountTypes
  rootName        String
  createdAt       DateTime      @default(now())
  Children        AccountsThirdLvl[]

  @@map("accounts_second")
}

model AccountsThirdLvl {
  accountId      String               @id @default(cuid())
  accountName    String
  rootId         Int
  runningBalance Int                  @default(0)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @default(now())
  isActive       Boolean              @default(true)



  RootID         AccountsSecondLvl    @relation(references: [rootId], fields: [rootId])
  IncomeItems    Items[]             @relation("IncomeItems")

  dividends      Dividends[]
}

// model ChartOfAccounts {
//   id               Int       @id @default(autoincrement())
//   accountName      String
//   accountCode      String    @unique
//   parentAccountId  Int?      
//   parentAccount    ChartOfAccounts? @relation("ParentChild", fields: [parentAccountId], references: [id])
//   children         ChartOfAccounts[] @relation("ParentChild")
//   accountType      AccountTypes
//   isActive         Boolean   @default(true)
//   createdAt        DateTime  @default(now())
//   updatedAt        DateTime  @updatedAt

//   @@index([parentAccountId])
// }


model Dividends {
  dividendId            BigInt                 @id  @default(autoincrement())
  memberId              String
  accountId             String
  datePosted            DateTime               @default(now())
  amount                Float
  members               Members                @relation(fields: [memberId], references: [memberId])
  account               AccountsThirdLvl       @relation(fields: [accountId], references: [accountId])


  @@map("dividends")
  @@index([memberId, accountId, datePosted])
}

model Savings {
  savingsId            String         @id @default(cuid())
  memberID             String         @unique
  savingsType          SavingsType
  currentBalance       Float
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @default(now())
}

model SavingsTransact {
  transactionId       BigInt          @id @default(autoincrement())
  savingsId           String
  transactionType     SavingsTransactionType
}

model LedgerPostings {
  transactionId    BigInt       @id @default(autoincrement())
  transactionType  String
  refName          String
  refType          String
  particular       String?
  debit            Float
  credit           Float
  createdAt        DateTime     @default(now())
}
